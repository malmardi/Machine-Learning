print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-9, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-7, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-7, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^-4, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^0, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
print('Confusion Matrix: ');print(table( nonLinear.prediction, nonlinear.test.output, dnn= c("prediction","reality") ))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbfdot', kpar=list(sigma=1), C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf', kpar=list(sigma=1), C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf', kpar=list(sigma=1), C=2^2, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf', kpar=list(sigma=1), C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf', kpar=list(sigma=1), C=2^-4, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf', kpar=list(sigma=1), C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot', kpar=list(sigma=1), C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='tanhdot',  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='tanhdot',  C=2^50, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='tanhdot',  C=2^-10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='tanhdot',  C=2^-14, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='tanhdot',  C=2^-50, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-50, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-9, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-8, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-7, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-4, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-3, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-2, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^-1, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^0, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^2, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='vanilladot',  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='splinedot',  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='splinedot',kpar=list(sigma=1),  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='splinedot',kpar=list(sigma=1),  C=2^0, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='splinedot',kpar=list(sigma=1),  C=2^-4, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='splinedot',kpar=list(sigma=1),  C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='splinedot',kpar=list(sigma=1),  C=2^-10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='splinedot',  C=2^-10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='laplacedot',  C=2^-10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='laplacedot',  C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='laplacedot',  C=2^-6, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='laplacedot',  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='laplacedot',kpar=list(sigma=1),  C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='laplacedot',kpar=list(sigma=1),  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf',kpar=list(sigma=1),  C=2^-10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf',kpar=list(sigma=1),  C=2^-5, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
require('manipulate')
manipulate( plot(ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel=k, C=2^c.exponent, scale=c() ), data=nonlinear.train ), c.exponent=slider(-20,20),
k=picker('Gaussian'='rbfdot', 'Linear'='vanilladot', 'Hyperbolic'='tanhdot','Spline'='splinedot', 'Laplacian'='laplacedot') )
require('manipulate')
manipulate( plot(ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel=k, C=2^c.exponent, scale=c() ), data=nonlinear.train ), c.exponent=slider(-10,10),
k=picker('Gaussian'='rbfdot', 'Linear'='vanilladot', 'Hyperbolic'='tanhdot','Spline'='splinedot', 'Laplacian'='laplacedot') )
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf',kpar=list(sigma=1),  C=2^-2, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
print('Confusion Matrix: ');print(table( nonLinear.prediction, nonlinear.test.output, dnn= c("prediction","reality") ))
nonLinear.prediction.score <- predict( nonlinear.svm, nonlinear.test.input, type='decision' )
require( 'ROCR' )
## ROC
nonLinear.roc.curve <- performance( prediction( nonLinear.prediction.score, nonlinear.test.output ), measure='tpr', x.measure='fpr' )
plot( nonLinear.roc.curve )
nonlinear.svm <- ksvm( y ~ ., data=nonlinear.train, type='C-svc', kernel='rbf',kpar=list(sigma=1),  C=2^10, scale=c() )
plot( nonlinear.svm, data=nonlinear.train )
### Prediction
nonLinear.prediction <- predict( nonlinear.svm, nonlinear.test.input)
# Look at accuracy
load('nonlinearSol.RData')
# contains non.test.output
print(paste0('Accuracy: ', 100*sum( nonLinear.prediction == nonlinear.test.output )/length(nonlinear.test.output), '%'))
print('Confusion Matrix: ');print(table( nonLinear.prediction, nonlinear.test.output, dnn= c("prediction","reality") ))
### ROC and Precision-Recall curves
nonLinear.prediction.score <- predict( nonlinear.svm, nonlinear.test.input, type='decision' )
require( 'ROCR' )
## ROC
nonLinear.roc.curve <- performance( prediction( nonLinear.prediction.score, nonlinear.test.output ), measure='tpr', x.measure='fpr' )
plot( nonLinear.roc.curve )
nonLinear.pr.curve <- performance( prediction( nonLinear.prediction.score, nonlinear.test.output ), measure='prec', x.measure='rec' )
plot( nonLinear.pr.curve )
BiasVarianceTradeoff <- function( dataset, cross=10, c.seq=2^seq(-10, 10), ... ) {
err <- sapply( c.seq, function( c )
{
cross( ksvm( y ~ ., data=dataset, C=c, cross=cross, ...) )
})
return(data.frame( c=c.seq, error=err ))
}
qplot( c, error, data=BiasVarianceTradeoff( nonlinear.train, type='C-svc', kernel='rbfdot' ), geom='line', log='x' )
require( 'kernlab' )
linear2.svm <- ksvm( y ~ ., data=linear2.train, type='C-svc', kernel='vanilladot',C=2^-10, scale=c() )
linear2.svm
### A.12) Plot the model
plot( linear2.svm, data=linear2.train )
### A.13) Prediction
linear2.prediction <- predict( linear2.svm, linear2.test.input)
### A.14) Look at accuracy
load('linear2Sol.RData')
# contains linear2.test.output
print(paste0('Accuracy: ', 100*sum( linear2.prediction == linear2.test.output )/length(linear2.test.output), '%'))
require( 'kernlab' )
linear2.svm <- ksvm( y ~ ., data=linear2.train, type='C-svc', kernel='vanilladot',C=2^-5, scale=c() )
linear2.svm
### A.12) Plot the model
plot( linear2.svm, data=linear2.train )
### A.13) Prediction
linear2.prediction <- predict( linear2.svm, linear2.test.input)
### A.14) Look at accuracy
load('linear2Sol.RData')
# contains linear2.test.output
print(paste0('Accuracy: ', 100*sum( linear2.prediction == linear2.test.output )/length(linear2.test.output), '%'))
require( 'kernlab' )
linear2.svm <- ksvm( y ~ ., data=linear2.train, type='C-svc', kernel='vanilladot',C=2^-10, scale=c() )
linear2.svm
### A.12) Plot the model
plot( linear2.svm, data=linear2.train )
### A.13) Prediction
linear2.prediction <- predict( linear2.svm, linear2.test.input)
### A.14) Look at accuracy
load('linear2Sol.RData')
# contains linear2.test.output
print(paste0('Accuracy: ', 100*sum( linear2.prediction == linear2.test.output )/length(linear2.test.output), '%'))
